/**
 * Core Web Vitals Optimization Utilities
 * Fokus pada LCP, FID, CLS, dan metrik performa penting lainnya
 */

// Largest Contentful Paint (LCP) Optimization
export function optimizeLCP() {
  if (typeof window === 'undefined') return;

  // Preload LCP elements
  const lcpElement = document.querySelector('img, video, .lcp-element');
  if (lcpElement) {
    const img = lcpElement as HTMLImageElement;
    if (img.src && !img.complete) {
      // Create preload link for LCP image
      const preloadLink = document.createElement('link');
      preloadLink.rel = 'preload';
      preloadLink.as = 'image';
      preloadLink.href = img.src;
      preloadLink.setAttribute('fetchpriority', 'high');
      document.head.appendChild(preloadLink);
    }
  }

  // Optimize font loading for LCP
  const fontPreload = document.createElement('link');
  fontPreload.rel = 'preload';
  fontPreload.href = 'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap';
  fontPreload.as = 'style';
  fontPreload.onload = function() {
    (this as HTMLLinkElement).onload = null;
    (this as HTMLLinkElement).rel = 'stylesheet';
  };
  document.head.appendChild(fontPreload);
}

// First Input Delay (FID) Optimization
export function optimizeFID() {
  if (typeof window === 'undefined') return;

  // Break up long tasks
  const scheduler = (window as unknown as { scheduler?: { postTask?: (callback: () => void, options?: { priority?: string }) => void } }).scheduler;
  if (scheduler && scheduler.postTask) {
    scheduler.postTask(() => {
      // Non-critical initialization
      console.log('Non-critical tasks scheduled');
    }, { priority: 'background' });
  }

  // Use requestIdleCallback for non-critical work
  if ('requestIdleCallback' in window) {
    const requestIdleCallback = (window as unknown as { requestIdleCallback?: (callback: () => void) => void }).requestIdleCallback;
    if (requestIdleCallback) {
      requestIdleCallback(() => {
        // Initialize non-critical features
        initializeNonCriticalFeatures();
      });
    }
  } else {
    // Fallback for browsers that don't support requestIdleCallback
    setTimeout(initializeNonCriticalFeatures, 100);
  }
}

function initializeNonCriticalFeatures() {
  // Initialize analytics, tracking, etc.
  // These don't block the main thread
  console.log('Non-critical features initialized');
}

// Cumulative Layout Shift (CLS) Optimization
export function optimizeCLS() {
  if (typeof window === 'undefined') return;

  // Reserve space for images and ads
  const images = document.querySelectorAll('img');
  images.forEach((img) => {
    const element = img as HTMLImageElement;
    if (!element.style.aspectRatio && element.width && element.height) {
      element.style.aspectRatio = `${element.width} / ${element.height}`;
    }
  });

  // Set explicit dimensions for iframes
  const iframes = document.querySelectorAll('iframe');
  iframes.forEach((iframe) => {
    const element = iframe as HTMLIFrameElement;
    if (!element.width) element.width = '300';
    if (!element.height) element.height = '150';
  });

  // Use font-display: swap for custom fonts
  const style = document.createElement('style');
  style.textContent = `
    @font-face {
      font-family: 'Inter';
      font-display: swap;
      src: url('https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2') format('woff2');
    }
  `;
  document.head.appendChild(style);
}

// Time to Interactive (TTI) Optimization
export function optimizeTTI() {
  if (typeof window === 'undefined') return;

  // Defer non-critical JavaScript
  const deferScripts = () => {
    const scripts = document.querySelectorAll('script[data-defer]');
    scripts.forEach((script) => {
      const newScript = document.createElement('script');
      newScript.src = (script as HTMLScriptElement).src;
      newScript.async = true;
      document.body.appendChild(newScript);
      script.remove();
    });
  };

  // Wait for main content to load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', deferScripts);
  } else {
    deferScripts();
  }
}

// Total Blocking Time (TBT) Optimization
export function optimizeTBT() {
  if (typeof window === 'undefined') return;

  // Break up long tasks using setTimeout
  function yieldToMain() {
    return new Promise(resolve => {
      setTimeout(resolve, 0);
    });
  }

  // Process tasks in chunks
  async function processTasks(tasks: (() => void)[]) {
    for (const task of tasks) {
      task();
      await yieldToMain();
    }
  }

  return { yieldToMain, processTasks };
}

// First Contentful Paint (FCP) Optimization
export function optimizeFCP() {
  if (typeof window === 'undefined') return;

  // Inline critical CSS
  const criticalCSS = `
    body { margin: 0; font-family: system-ui, sans-serif; }
    .loading { display: flex; justify-content: center; align-items: center; height: 100vh; }
  `;
  
  const style = document.createElement('style');
  style.textContent = criticalCSS;
  style.setAttribute('data-critical', 'true');
  document.head.insertBefore(style, document.head.firstChild);

  // Minimize render-blocking resources
  const links = document.querySelectorAll('link[rel="stylesheet"]');
  links.forEach((link) => {
    const element = link as HTMLLinkElement;
    if (!element.media) {
      element.media = 'print';
      element.onload = function() {
        (this as HTMLLinkElement).media = 'all';
      };
    }
  });
}

// Network Performance Optimization
export function optimizeNetworkPerformance() {
  if (typeof window === 'undefined') return;

  // Enable HTTP/2 Server Push simulation
  const criticalResources = [
    '/image/logo/berdu.jpeg',
    '/image/homepage/website-portfolio-personal.png'
  ];

  criticalResources.forEach(resource => {
    const link = document.createElement('link');
    link.rel = 'prefetch';
    link.href = resource;
    link.as = 'image';
    document.head.appendChild(link);
  });

  // Implement resource hints
  const hints = [
    { rel: 'dns-prefetch', href: '//fonts.googleapis.com' },
    { rel: 'dns-prefetch', href: '//fonts.gstatic.com' },
    { rel: 'preconnect', href: '//fonts.googleapis.com', crossOrigin: 'anonymous' },
    { rel: 'preconnect', href: '//fonts.gstatic.com', crossOrigin: 'anonymous' }
  ];

  hints.forEach(hint => {
    const link = document.createElement('link');
    Object.keys(hint).forEach(key => {
      const value = hint[key as keyof typeof hint];
      if (key === 'crossOrigin' && value) {
        link.setAttribute('crossorigin', value);
      } else if (key !== 'crossOrigin' && value) {
        link.setAttribute(key, value);
      }
    });
    document.head.appendChild(link);
  });
}

// Measure and report Web Vitals
export function measureWebVitals(callback: (metric: { name: string; value: number; rating: string }) => void) {
  if (typeof window === 'undefined') return;

  // Largest Contentful Paint
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    const lastEntry = entries[entries.length - 1];
    callback({
      name: 'LCP',
      value: lastEntry.startTime,
      rating: lastEntry.startTime <= 2500 ? 'good' : lastEntry.startTime <= 4000 ? 'needs-improvement' : 'poor'
    });
  }).observe({ entryTypes: ['largest-contentful-paint'] });

  // First Input Delay
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    entries.forEach((entry: PerformanceEntry & { processingStart?: number }) => {
      const fid = (entry.processingStart || 0) - entry.startTime;
      callback({
        name: 'FID',
        value: fid,
        rating: fid <= 100 ? 'good' : fid <= 300 ? 'needs-improvement' : 'poor'
      });
    });
  }).observe({ entryTypes: ['first-input'] });

  // Cumulative Layout Shift
  let clsValue = 0;
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    entries.forEach((entry: PerformanceEntry & { hadRecentInput?: boolean; value?: number }) => {
      if (!entry.hadRecentInput && entry.value) {
        clsValue += entry.value;
      }
    });
    callback({
      name: 'CLS',
      value: clsValue,
      rating: clsValue <= 0.1 ? 'good' : clsValue <= 0.25 ? 'needs-improvement' : 'poor'
    });
  }).observe({ entryTypes: ['layout-shift'] });

  // First Contentful Paint
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
    if (fcpEntry) {
      callback({
        name: 'FCP',
        value: fcpEntry.startTime,
        rating: fcpEntry.startTime <= 1800 ? 'good' : fcpEntry.startTime <= 3000 ? 'needs-improvement' : 'poor'
      });
    }
  }).observe({ entryTypes: ['paint'] });

  // Time to First Byte
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    const navigation = entries[0] as PerformanceNavigationTiming;
    if (navigation) {
      const ttfb = navigation.responseStart - navigation.requestStart;
      callback({
        name: 'TTFB',
        value: ttfb,
        rating: ttfb <= 800 ? 'good' : ttfb <= 1800 ? 'needs-improvement' : 'poor'
      });
    }
  }).observe({ entryTypes: ['navigation'] });
}

// Initialize all optimizations
export function initializeWebVitalsOptimization() {
  if (typeof window === 'undefined') return;

  // Run optimizations in order of priority
  optimizeFCP();
  optimizeLCP();
  optimizeCLS();
  optimizeFID();
  optimizeTTI();
  optimizeTBT();
  optimizeNetworkPerformance();

  // Measure and report metrics
  measureWebVitals((metric) => {
    console.log(`Web Vitals - ${metric.name}: ${metric.value.toFixed(2)} (${metric.rating})`);
    
    // Send to analytics in production
    if (process.env.NODE_ENV === 'production' && 'gtag' in window) {
      const gtag = (window as unknown as { gtag?: (command: string, eventName: string, options?: Record<string, unknown>) => void }).gtag;
      if (gtag) {
        gtag('event', metric.name, {
        event_category: 'Web Vitals',
        value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
        non_interaction: true,
        custom_map: {
          [metric.name]: metric.value,
          [`${metric.name}_rating`]: metric.rating
        };
      }
    }
  });
}

// Performance monitoring for development
export function enablePerformanceMonitoring() {
  if (typeof window === 'undefined' || process.env.NODE_ENV !== 'development') return;

  // Monitor long tasks
  if ('PerformanceObserver' in window) {
    new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        if (entry.duration > 50) {
          console.warn(`Long task detected: ${entry.duration.toFixed(2)}ms`, entry);
        }
      });
    }).observe({ entryTypes: ['longtask'] });
  }

  // Monitor memory usage
  if ('memory' in performance) {
    setInterval(() => {
      const memory = (performance as unknown as { memory?: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory;
      if (memory) {
        console.log('Memory usage:', {
          used: `${(memory.usedJSHeapSize / 1048576).toFixed(2)} MB`,
          total: `${(memory.totalJSHeapSize / 1048576).toFixed(2)} MB`,
          limit: `${(memory.jsHeapSizeLimit / 1048576).toFixed(2)} MB`
        });
      }
    }, 30000); // Every 30 seconds
  }
}